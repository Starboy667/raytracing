#version 450
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout (binding = 0, rgba8) uniform image2D colorBuffer;

struct Sphere {
    vec3 center;
    float radius;
    vec3 color;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct Camera {
    vec3 position;
    vec3 forwards;
    vec3 right;
    vec3 up;
};

float hit(Ray ray, Sphere sphere) {
    vec3 oc = sphere.center - ray.origin; 
    float a = pow(length(ray.direction), 2);
    float h = dot(oc, ray.direction);
    float c = pow(length(oc), 2) - sphere.radius * sphere.radius;
    float discriminant = h * h - a * c;
    if (discriminant < 0) {
        return -1.0;
    } else {
        return (h - sqrt(discriminant) ) / a;
    }
}

vec3 get_color(Ray ray, Sphere sphere) {
    float t = hit(ray, sphere);
    if (t > 0) {
        vec3 N = normalize(ray.origin + t * ray.direction - sphere.center);
        return 0.5 * (N + 1.0);
    }
    // background color
    // return vec3(0.0, 0.250, 0.250);
    vec3 unit_direction = normalize(ray.direction);
    float a = 0.5 * (unit_direction.y + 1.0);
    return (1.0 - a) * vec3(1.0) + a * vec3(0.5, 0.7, 1.0);
}


void main() {
    // x.y = pixel position
    ivec2 screen_pos = ivec2(gl_GlobalInvocationID.xy);
    ivec2 screen_size = imageSize(colorBuffer);

    // map pixel position to -1 to 1 so we can use it to calculate the ray direction
    float horizontalCoefficient = ((float(screen_pos.x) * 2 - screen_size.x) / screen_size.x);
    float verticalCoefficient = ((float(screen_pos.y) * 2 - screen_size.y) / screen_size.x);

    Camera camera;
    camera.position = vec3(0.0);
    camera.forwards = vec3(1.0, 0.0, 0.0);
    camera.right = vec3(0.0, 1.0, 0.0);
    camera.up = vec3(0.0, 0.0, 1.0);

    Ray ray;
    ray.origin = camera.position;
    ray.direction = camera.forwards + horizontalCoefficient * camera.right + verticalCoefficient * camera.up;

    Sphere sphere;
    sphere.center = vec3(3.0, 0.0, 0.0);
    sphere.radius = 1.0;
    sphere.color = vec3(1.0, 0.3, 0.7);

    imageStore(colorBuffer, screen_pos, vec4(get_color(ray, sphere), 1.0));
}
