#version 450
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "def.glsl"

layout (binding = 0, rgba8) uniform image2D colorBuffer;
layout (binding = 1, rgba32f) uniform image2D accumulationImage;
layout (binding = 2) buffer sphereBuffer {
    Sphere spheres[];
} SphereData;
layout (binding = 3) uniform UniformBufferObject {
    vec3 camera_forward;
    vec3 camera_right;
    vec3 camera_up;
    vec3 camera_position;
    int sphereCount;
    int frameCount;
} SceneData;

Ray CreateRay(vec3 origin, vec3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = vec3(0.0f, 0.0f, 0.0f);
    hit.distance = pos_infinity;
    hit.normal = vec3(0.0f, 0.0f, 0.0f);
    hit.sphereIndex = -1;
    return hit;
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();

    for (int i = 0; i < SceneData.sphereCount; i++)
    {
        Sphere sphere = SphereData.spheres[i];
        vec3 origin = ray.origin - sphere.center;
        float a = dot(ray.direction, ray.direction);
        float b = 2.0f * dot(origin, ray.direction);
        float c = dot(origin, origin) - sphere.radius * sphere.radius;
        float discriminant = b * b - 4.0f * a * c;
        if (discriminant < 0.0f)
            continue;
        float closestD = (-b - sqrt(discriminant)) / (2.0f * a);
        if (closestD > 0 && closestD < bestHit.distance)
        {
            bestHit.distance = closestD;
            bestHit.position = ray.origin + closestD * ray.direction;
            bestHit.normal = normalize(bestHit.position - sphere.center);
            bestHit.color = sphere.color;
            bestHit.sphereIndex = i;
        }
    }
    return bestHit;
}

struct Material {
    vec3 albedo;
    float roughness;
    // float metallic;
    // float reflectivity;
};

void main() {
    ivec2 screen_pos = ivec2(gl_GlobalInvocationID.xy);
    ivec2 screen_size = imageSize(colorBuffer);
    float horizontalCoefficient = ((float(screen_pos.x) * 2 - screen_size.x) / screen_size.x);
    float verticalCoefficient = ((float(screen_pos.y) * 2 - screen_size.y) / screen_size.x);
    vec3 pixel_color = vec3(0.0);
    // clear accumulate buffer when frame count is 1
    if (SceneData.frameCount == 1) {
        imageStore(accumulationImage, screen_pos, vec4(0.0));
    }
    Camera camera;
    camera.position = SceneData.camera_position;
    camera.forwards = SceneData.camera_forward;
    camera.right = SceneData.camera_right;
    camera.up = SceneData.camera_up;

    Ray ray;
    ray.origin = camera.position;
    ray.direction = normalize(camera.forwards + horizontalCoefficient * camera.right + verticalCoefficient * camera.up);
    
    vec3 light = vec3(0.0f);
    // vec3 contribution = vec3(0.0f);
    vec3 contribution = vec3(0.15f);
    for (int i = 0; i < 50; i++) {
        RayHit bestHit = Trace(ray);
        if (bestHit.distance < 0.0f || bestHit.sphereIndex == -1)
        {
            vec3 sky_color = vec3(0.6f, 0.7f, 0.9f);
            light += sky_color * contribution;
            break;
        }
        Sphere sphere = SphereData.spheres[bestHit.sphereIndex];
        // Material material = Material(sphere.color, rand(vec2(gl_GlobalInvocationID.xy), SceneData.frameCount, i));
        float roughness = rand_vec3(0.0f, 0.02f, vec2(gl_GlobalInvocationID.xy), SceneData.frameCount, i).x;
        Material material = Material(sphere.color, roughness);
        // Material material = Material(sphere.color, 0.02f);

        contribution *= material.albedo;
        if (bestHit.sphereIndex == 0 || bestHit.sphereIndex == 1 || bestHit.sphereIndex == 2){
            light += 2.0f * material.albedo;
        }
        // light += 2.0f * material.albedo;
        // light += material.emission
        ray.origin = bestHit.position + bestHit.normal * 0.0001f;
        // ray.direction = normalize(bestHit.normal + normalize(rand_vec3(-1.0, 1.0, vec2(gl_GlobalInvocationID.xy + i))));

        ray.direction = reflect(ray.direction, bestHit.normal + material.roughness * normalize(rand_vec3(-1.0, 1.0, vec2(gl_GlobalInvocationID.xy), SceneData.frameCount, i)));
        // ray.direction = normalize(random_hemisphere_vector(
        //     bestHit.normal, 
        //     vec2(gl_GlobalInvocationID.xy), 
        //     SceneData.frameCount, 
        //     i
        // ));
    }
    vec4 accumulated = imageLoad(accumulationImage, screen_pos);
    vec4 newAccumulated = vec4(light, 1.0) + accumulated;
    imageStore(accumulationImage, screen_pos, newAccumulated);
    vec3 finalColor = newAccumulated.rgb / float(SceneData.frameCount + 1);
    // clamp?
    // finalColor = clamp(finalColor, 0.0f, 1.0f);
    imageStore(colorBuffer, screen_pos, vec4(finalColor, 1.0));
}