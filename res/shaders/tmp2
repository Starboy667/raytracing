#version 450
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "def.glsl"

layout (binding = 0, rgba8) uniform image2D colorBuffer;

layout(std140, binding = 1) readonly buffer sphereBuffer {
    Sphere spheres[];
} SphereData; 

layout(std140, binding = 2) uniform UniformBufferObject {
    vec3 camera_forward;
    vec3 camera_right;
    vec3 camera_up;
    vec3 camera_position;
    int sphereCount;
} SceneData;

Ray CreateRay(vec3 origin, vec3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = vec3(0.0f, 0.0f, 0.0f);
    hit.distance = pos_infinity;
    hit.normal = vec3(0.0f, 0.0f, 0.0f);
    return hit;
}

void IntersectGroundPlane(Ray ray, out RayHit bestHit) {
    // Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = vec3(0.0f, 1.0f, 0.0f);
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, vec4 sphere)
{
    // Calculate distance along the ray where the sphere is intersected
    vec3 d = ray.origin - sphere.xyz;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.xyz);
    }
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    IntersectSphere(ray, bestHit, vec4(0, 0.0f, 0, 1.0f));
    IntersectGroundPlane(ray, bestHit);
    return bestHit;
}

vec3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < pos_infinity)
    {
        // Return the normal
        return hit.normal * 0.5f + 0.5f;
    }
    else
    {
        // Sample the skybox and write it
        // float theta = acos(ray.direction.y) / -M_PI;
        // float phi = atan2(ray.direction.x, -ray.direction.z) / -M_PI * 0.5f;
        // return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
        return vec3(0.2, 0.3, 0.5);
    }
}

void main() {
    ivec2 screen_pos = ivec2(gl_GlobalInvocationID.xy);
    ivec2 screen_size = imageSize(colorBuffer);
    float horizontalCoefficient = ((float(screen_pos.x) * 2 - screen_size.x) / screen_size.x);
    float verticalCoefficient = ((float(screen_pos.y) * 2 - screen_size.y) / screen_size.x);
    vec3 pixel_color = vec3(0.0);

    Camera camera;
    camera.position = SceneData.camera_position;
    camera.forwards = SceneData.camera_forward;
    camera.right = SceneData.camera_right;
    camera.up = SceneData.camera_up;

    Ray ray;
    ray.origin = camera.position;
    ray.direction = normalize(camera.forwards + horizontalCoefficient * camera.right + verticalCoefficient * camera.up);
    
    RayHit hit = Trace(ray);
    pixel_color = Shade(ray, hit);
    imageStore(colorBuffer, screen_pos, vec4(pixel_color, 1.0));
}